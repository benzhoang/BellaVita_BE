openapi: 3.1.0
info:
  title: BellaVita API
  version: 1.0.0
  description: "API documentation for the BellaVita e-commerce project. This API handles user management, product catalog, orders, payments, and more."
servers: []
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management
  - name: Categories
    description: Product category management
  - name: Products
    description: Product management
  - name: Orders
    description: Order and order item management
  - name: Payments
    description: Payment processing and management
  - name: Reviews
    description: Product review management
  - name: Carts
    description: Shopping cart management
  - name: AdminLogs
    description: Admin activity log management

# ===============================================================
# PATHS
# ===============================================================
paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              name: "John Doe"
              email: "john.doe@example.com"
              password: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "john.doe@example.com"
              password: "password123"
      responses:
        '200':
          description: Login successful, returns JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Users]
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/orders:
    post:
      tags: [Orders]
      summary: Create a new order with items
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
            example:
              user_id: 1
              payment_method: "VNPAY"
              orderItems:
                - product_id: 1
                  quantity: 2
                - product_id: 2
                  quantity: 1
                  price: 55000
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/InvalidInput'
    get:
      tags: [Orders]
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /api/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/orders/{id}/order-items:
    get:
      tags: [Orders]
      summary: Get all order items for an order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
      responses:
        '200':
          description: A list of order items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
    post:
      tags: [Orders]
      summary: Add an item to an order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
      requestBody:
        description: Order item data to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemInput'
      responses:
        '201':
          description: Order item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/orders/{order_id}/order-items/{item_id}:
    put:
      tags: [Orders]
      summary: Update an order item
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the order item
          schema:
            type: integer
      requestBody:
        description: Order item data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemInput'
      responses:
        '200':
          description: Order item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Orders]
      summary: Delete an order item
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the order item
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/orders/user/{user_id}:
    get:
      tags: [Orders]
      summary: Get all orders for a specific user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: A list of orders for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /api/payment/create_payment_url:
    post:
      tags: [Payments]
      summary: Create a VNPAY payment URL
      description: "Creates a VNPAY payment URL. Amount is automatically retrieved from the order in database."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                  description: "ID of the order to pay for"
                  example: 1
                bankCode:
                  type: string
                  description: "Optional: VNPAY bank code for specific bank"
                  example: "VNPAYQR"
                orderDescription:
                  type: string
                  description: "Optional: Custom order description"
                  example: "Thanh toan don hang #1"
                orderType:
                  type: string
                  description: "Optional: Order type for VNPAY"
                  default: "billpayment"
                  example: "billpayment"
                language:
                  type: string
                  description: "Optional: Language for VNPAY interface"
                  default: "vn"
                  example: "vn"
              required:
                - orderId
            example:
              orderId: 1
              bankCode: "VNPAYQR"
              orderDescription: "Thanh toan don hang #1"
      responses:
        '200':
          description: Payment URL created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  paymentUrl:
                    type: string
                    description: "VNPAY payment URL"
                    example: "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?..."
                  paymentId:
                    type: integer
                    description: "Payment record ID"
                    example: 8
                  orderId:
                    type: integer
                    description: "Order ID"
                    example: 1
                  amount:
                    type: number
                    description: "Amount retrieved from order"
                    example: 150000
        '400':
          description: "Invalid input or order already paid"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Order has already been paid"
        '404':
          description: "Order not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Order not found"

  /api/payment/stats:
    get:
      tags: [Payments]
      summary: Get payment statistics
      description: "Retrieves payment statistics including total payments, success rate, and total amount"
      responses:
        '200':
          description: Payment statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  stats:
                    type: object
                    properties:
                      totalPayments:
                        type: integer
                        description: "Total number of payments"
                        example: 100
                      successfulPayments:
                        type: integer
                        description: "Number of successful payments"
                        example: 85
                      failedPayments:
                        type: integer
                        description: "Number of failed payments"
                        example: 15
                      successRate:
                        type: string
                        description: "Success rate percentage"
                        example: "85.00"
                      totalAmount:
                        type: number
                        description: "Total amount of successful payments"
                        example: 15000000

  /api/payment:
    get:
      tags: [Payments]
      summary: Get all payments with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: "Page number for pagination"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: "Number of items per page"
        - in: query
          name: status
          schema:
            type: string
            enum: [true, false]
          description: "Filter by payment status"
      responses:
        '200':
          description: List of payments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  pagination:
                    type: object
                    properties:
                      currentPage:
                        type: integer
                        example: 1
                      totalPages:
                        type: integer
                        example: 5
                      totalItems:
                        type: integer
                        example: 50
                      itemsPerPage:
                        type: integer
                        example: 10

  /api/payment/{id}:
    get:
      tags: [Payments]
      summary: Get payment by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payment:
                    $ref: '#/components/schemas/Payment'
        '404':
          description: "Payment not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Payment not found"

  /api/payment/vnpay_return:
    get:
      tags: [Payments]
      summary: VNPAY callback endpoint
      description: "VNPAY redirects the user to this endpoint after payment. This handles the transaction result."
      parameters:
        - in: query
          name: vnp_TxnRef
          schema: { type: string }
          description: "Payment transaction reference"
        - in: query
          name: vnp_ResponseCode
          schema: { type: string }
          description: "VNPAY response code (00 = success)"
        - in: query
          name: vnp_Amount
          schema: { type: string }
          description: "Transaction amount"
        - in: query
          name: vnp_BankCode
          schema: { type: string }
          description: "Bank code used for payment"
        - in: query
          name: vnp_TransactionNo
          schema: { type: string }
          description: "VNPAY transaction number"
        - in: query
          name: vnp_PayDate
          schema: { type: string }
          description: "Payment date"
        - in: query
          name: vnp_SecureHash
          schema: { type: string }
          description: "VNPAY secure hash for verification"
      responses:
        '200':
          description: "Payment processed successfully. Returns JSON or redirects based on VNPAY_RETURN_METHOD."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Payment successful"
                  orderId:
                    type: integer
                    example: 1
        '400':
          description: "Payment failed or invalid signature"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Payment failed"
                  code:
                    type: string
                    example: "07"

  /api/categories:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags: [Categories]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        description: Category data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/categories/{id}:
    get:
      tags: [Categories]
      summary: Get category by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Categories]
      summary: Update a category
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Category data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Categories]
      summary: Delete a category
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/products:
    get:
      tags: [Products]
      summary: Get all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        description: Product data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Products]
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Product data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Products]
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/reviews:
    get:
      tags: [Reviews]
      summary: Get reviews by product ID
      parameters:
        - name: product_id
          in: query
          required: true
          description: The ID of the product to fetch reviews for
          schema:
            type: integer
      responses:
        '200':
          description: A list of reviews for a product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      tags: [Reviews]
      summary: Create a new review
      security:
        - bearerAuth: []
      requestBody:
        description: Review data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/reviews/{id}:
    get:
      tags: [Reviews]
      summary: Get review by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Reviews]
      summary: Update a review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Review data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Reviews]
      summary: Delete a review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/carts:
    get:
      tags: [Carts]
      summary: Get all carts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
    post:
      tags: [Carts]
      summary: Create a new cart
      security:
        - bearerAuth: []
      requestBody:
        description: Cart data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/carts/{id}:
    get:
      tags: [Carts]
      summary: Get cart by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Carts]
      summary: Update a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Cart data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Carts]
      summary: Delete a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/carts/{id}/cart-items:
    get:
      tags: [Carts]
      summary: Get all items in a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A list of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
    post:
      tags: [Carts]
      summary: Add an item to a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Cart item data to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '201':
          description: Cart item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/carts/{cart_id}/cart-items/{item_id}:
    put:
      tags: [Carts]
      summary: Update a cart item
      security:
        - bearerAuth: []
      parameters:
        - name: cart_id
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the cart item
          schema:
            type: integer
      requestBody:
        description: Cart item data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Carts]
      summary: Delete a cart item
      security:
        - bearerAuth: []
      parameters:
        - name: cart_id
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the cart item
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/admin-logs:
    get:
      tags: [AdminLogs]
      summary: Get all admin logs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of admin logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminLog'
    post:
      tags: [AdminLogs]
      summary: Create a new admin log
      security:
        - bearerAuth: []
      requestBody:
        description: Admin log data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogInput'
      responses:
        '201':
          description: Admin log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /api/admin-logs/{id}:
    get:
      tags: [AdminLogs]
      summary: Get admin log by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Admin log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [AdminLogs]
      summary: Update an admin log
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Admin log data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogInput'
      responses:
        '200':
          description: Admin log updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [AdminLogs]
      summary: Delete an admin log
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

# ===============================================================
# COMPONENTS
# ===============================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Id:
      name: id
      in: path
      required: true
      description: The ID of the resource
      schema:
        type: integer

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInput:
      description: Invalid input data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SuccessDelete:
      description: Resource deleted successfully.
      content:
        application/json:
          schema:
            type: integer

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.
        details:
          type: object
          description: Additional error details.

    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password

    User:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        status:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        brand:
          type: string
        skin_type:
          type: string
        image_url:
          type: string
        stock_quantity:
          type: integer
        category_id:
          type: integer
        barcode:
          type: string
      required:
        - name
        - price
        - category_id
        - stock_quantity

    Product:
      type: object
      properties:
        product_id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        brand:
          type: string
        skin_type:
          type: string
        image_url:
          type: string
        stock_quantity:
          type: integer
        category_id:
          type: integer
        barcode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryInput:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type

    Category:
      type: object
      properties:
        category_id:
          type: integer
        name:
          type: string
        type:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItemInput:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
          description: "Product price at the time of purchase. If not provided, the current product price will be used."
      required:
        - product_id
        - quantity

    OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float

    OrderInput:
      type: object
      properties:
        user_id:
          type: integer
        status:
          type: boolean
          default: false
        payment_method:
          type: string
          default: 'VNPAY'
        total_amount:
          type: number
          format: float
          description: "Total amount of the order. If not provided, it will be calculated automatically from orderItems."
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemInput'
      required:
        - user_id
        - orderItems

    Order:
      type: object
      properties:
        order_id:
          type: integer
        user_id:
          type: integer
        status:
          type: boolean
        payment_method:
          type: string
        total_amount:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    Payment:
      type: object
      description: "Payment record for order transactions"
      properties:
        payment_id:
          type: integer
          description: "Unique payment identifier"
          example: 8
        order_id:
          type: integer
          description: "ID of the order being paid"
          example: 1
        method:
          type: string
          description: "Payment method used"
          example: "VNPAY"
        status:
          type: boolean
          description: "Payment status (true = successful, false = pending/failed)"
          example: true
        transaction_id:
          type: string
          description: "Transaction ID from payment gateway"
          example: "8"
        processed_at:
          type: string
          format: date-time
          description: "Timestamp when payment was processed"
          example: "2024-12-19T10:30:00.000Z"
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when payment record was created"
          example: "2024-12-19T10:25:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when payment record was last updated"
          example: "2024-12-19T10:30:00.000Z"

    ReviewInput:
      type: object
      properties:
        product_id:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
      required:
        - product_id
        - rating
        - comment

    Review:
      type: object
      properties:
        review_id:
          type: integer
        product_id:
          type: integer
        user_id:
          type: integer
        rating:
          type: integer
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartInput:
      type: object
      properties:
        user_id:
          type: integer
      required:
        - user_id

    Cart:
      type: object
      properties:
        cart_id:
          type: integer
        user_id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItemInput:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
      required:
        - product_id
        - quantity

    CartItem:
      type: object
      properties:
        cart_item_id:
          type: integer
        cart_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AdminLogInput:
      type: object
      properties:
        admin_id:
          type: integer
        action:
          type: string
        details:
          type: string
      required:
        - admin_id
        - action

    AdminLog:
      type: object
      properties:
        log_id:
          type: integer
        admin_id:
          type: integer
        action:
          type: string
        details:
          type: string
        createdAt:
          type: string
          format: date-time

  
