openapi: 3.1.0
info:
  title: BellaVita API
  version: 1.0.0
  description: "API documentation for the BellaVita e-commerce project. This API handles user management, product catalog, orders, payments, and more."
servers:
  - url: http://localhost:3000/api
    description: Local development server
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User management
  - name: Categories
    description: Product category management
  - name: Products
    description: Product management
  - name: Orders
    description: Order and order item management
  - name: Payments
    description: Payment processing and management
  - name: Reviews
    description: Product review management
  - name: Carts
    description: Shopping cart management
  - name: AdminLogs
    description: Admin activity log management

# ===============================================================
# PATHS
# ===============================================================
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              name: "John Doe"
              email: "john.doe@example.com"
              password: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "john.doe@example.com"
              password: "password123"
      responses:
        '200':
          description: Login successful, returns JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Users]
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders:
    post:
      tags: [Orders]
      summary: Create a new order with items
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
            example:
              user_id: 1
              payment_method: "VNPAY"
              orderItems:
                - product_id: 1
                  quantity: 2
                - product_id: 2
                  quantity: 1
                  price: 55000
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/InvalidInput'
    get:
      tags: [Orders]
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

  /payment/create_payment_url:
    post:
      tags: [Payments]
      summary: Create a VNPAY payment URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                amount:
                  type: number
                bankCode:
                  type: string
                  description: "Optional: VNPAY bank code for specific bank."
                orderDescription:
                  type: string
                orderType:
                  type: string
                  default: "billpayment"
                language:
                  type: string
                  default: "vn"
              required:
                - orderId
                - amount
            example:
              orderId: "6"
              amount: 150000
              bankCode: "VNPAYQR"
              orderDescription: "Thanh toan don hang #6"
      responses:
        '200':
          description: Payment URL created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  paymentUrl:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidInput'

  /payment/vnpay_return:
    get:
      tags: [Payments]
      summary: VNPAY callback endpoint
      description: "VNPAY redirects the user to this endpoint after payment. This handles the transaction result."
      parameters:
        - in: query
          name: vnp_TxnRef
          schema: { type: string }
        - in: query
          name: vnp_ResponseCode
          schema: { type: string }
        - in: query
          name: vnp_SecureHash
          schema: { type: string }
      responses:
        '200':
          description: "Payment processed. Returns JSON or redirects based on VNPAY_RETURN_METHOD."
        '400':
          description: "Payment failed or invalid signature."

  /categories:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags: [Categories]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        description: Category data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /categories/{id}:
    get:
      tags: [Categories]
      summary: Get category by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Categories]
      summary: Update a category
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Category data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Categories]
      summary: Delete a category
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /products:
    get:
      tags: [Products]
      summary: Get all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        description: Product data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Products]
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Product data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Products]
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /reviews:
    get:
      tags: [Reviews]
      summary: Get reviews by product ID
      parameters:
        - name: product_id
          in: query
          required: true
          description: The ID of the product to fetch reviews for
          schema:
            type: integer
      responses:
        '200':
          description: A list of reviews for a product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      tags: [Reviews]
      summary: Create a new review
      security:
        - bearerAuth: []
      requestBody:
        description: Review data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /reviews/{id}:
    get:
      tags: [Reviews]
      summary: Get review by ID
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Reviews]
      summary: Update a review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Review data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Reviews]
      summary: Delete a review
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /carts:
    get:
      tags: [Carts]
      summary: Get all carts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
    post:
      tags: [Carts]
      summary: Create a new cart
      security:
        - bearerAuth: []
      requestBody:
        description: Cart data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /carts/{id}:
    get:
      tags: [Carts]
      summary: Get cart by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Carts]
      summary: Update a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Cart data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInput'
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Carts]
      summary: Delete a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /carts/{id}/cart-items:
    get:
      tags: [Carts]
      summary: Get all items in a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A list of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
    post:
      tags: [Carts]
      summary: Add an item to a cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Cart item data to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '201':
          description: Cart item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /carts/{cart_id}/cart-items/{item_id}:
    put:
      tags: [Carts]
      summary: Update a cart item
      security:
        - bearerAuth: []
      parameters:
        - name: cart_id
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the cart item
          schema:
            type: integer
      requestBody:
        description: Cart item data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemInput'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Carts]
      summary: Delete a cart item
      security:
        - bearerAuth: []
      parameters:
        - name: cart_id
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The ID of the cart item
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin-logs:
    get:
      tags: [AdminLogs]
      summary: Get all admin logs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of admin logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminLog'
    post:
      tags: [AdminLogs]
      summary: Create a new admin log
      security:
        - bearerAuth: []
      requestBody:
        description: Admin log data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogInput'
      responses:
        '201':
          description: Admin log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '400':
          $ref: '#/components/responses/InvalidInput'

  /admin-logs/{id}:
    get:
      tags: [AdminLogs]
      summary: Get admin log by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Admin log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [AdminLogs]
      summary: Update an admin log
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Admin log data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogInput'
      responses:
        '200':
          description: Admin log updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLog'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [AdminLogs]
      summary: Delete an admin log
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '404':
          $ref: '#/components/responses/NotFound'

# ===============================================================
# COMPONENTS
# ===============================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Id:
      name: id
      in: path
      required: true
      description: The ID of the resource
      schema:
        type: integer

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInput:
      description: Invalid input data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    SuccessDelete:
      description: Resource deleted successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource deleted successfully"

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.
        details:
          type: object
          description: Additional error details.

    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password

    User:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        status:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        brand:
          type: string
        skin_type:
          type: string
        image_url:
          type: string
        stock_quantity:
          type: integer
        category_id:
          type: integer
        barcode:
          type: string
      required:
        - name
        - price
        - category_id
        - stock_quantity

    Product:
      type: object
      properties:
        product_id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        brand:
          type: string
        skin_type:
          type: string
        image_url:
          type: string
        stock_quantity:
          type: integer
        category_id:
          type: integer
        barcode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CategoryInput:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type

    Category:
      type: object
      properties:
        category_id:
          type: integer
        name:
          type: string
        type:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItemInput:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
          description: "Product price at the time of purchase. If not provided, the current product price will be used."
      required:
        - product_id
        - quantity

    OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float

    OrderInput:
      type: object
      properties:
        user_id:
          type: integer
        status:
          type: boolean
          default: false
        payment_method:
          type: string
          default: 'VNPAY'
        total_amount:
          type: number
          format: float
          description: "Total amount of the order. If not provided, it will be calculated automatically from orderItems."
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemInput'
      required:
        - user_id
        - orderItems

    Order:
      type: object
      properties:
        order_id:
          type: integer
        user_id:
          type: integer
        status:
          type: boolean
        payment_method:
          type: string
        total_amount:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    Payment:
      type: object
      properties:
        payment_id:
          type: integer
        order_id:
          type: integer
        amount:
          type: number
          format: float
        method:
          type: string
        status:
          type: boolean
        transaction_id:
          type: string
        processed_at:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ReviewInput:
      type: object
      properties:
        product_id:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
      required:
        - product_id
        - rating
        - comment

    Review:
      type: object
      properties:
        review_id:
          type: integer
        product_id:
          type: integer
        user_id:
          type: integer
        rating:
          type: integer
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartInput:
      type: object
      properties:
        user_id:
          type: integer
      required:
        - user_id

    Cart:
      type: object
      properties:
        cart_id:
          type: integer
        user_id:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CartItemInput:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
      required:
        - product_id
        - quantity

    CartItem:
      type: object
      properties:
        cart_item_id:
          type: integer
        cart_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AdminLogInput:
      type: object
      properties:
        admin_id:
          type: integer
        action:
          type: string
        details:
          type: string
      required:
        - admin_id
        - action

    AdminLog:
      type: object
      properties:
        log_id:
          type: integer
        admin_id:
          type: integer
        action:
          type: string
        details:
          type: string
        createdAt:
          type: string
          format: date-time

  
