const jwt = require('jsonwebtoken');
// const User = require('../models/userModel');
// const AIPackage = require('../models/aiPackageModel');

function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, process.env.JWT_SECRET || 'secret_key', (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// Middleware ki·ªÉm tra quy·ªÅn (v√≠ d·ª•: ch·ªâ cho admin)
function authorizeRole(role) {
  return (req, res, next) => {
    if (req.user.role !== role) return res.sendStatus(403);
    next();
  };
}

// Middleware ki·ªÉm tra g√≥i AI - T·∫†M TH·ªúI DISABLE
async function checkAIPackage(req, res, next) {
  // TODO: Implement khi c√≥ AI backend
  console.log('ü§ñ AI Package check - T·∫†M TH·ªúI DISABLE');
  console.log('üìù C·∫ßn t√≠ch h·ª£p AI backend tr∆∞·ªõc khi enable');
  
  // T·∫°m th·ªùi cho ph√©p t·∫•t c·∫£ user ƒë√£ ƒëƒÉng nh·∫≠p
  next();
  
  /* 
  // Code g·ªëc - s·∫Ω enable sau khi c√≥ AI backend
  try {
    console.log('üîç Ki·ªÉm tra g√≥i AI cho user:', req.user.user_id);
    
    // L·∫•y th√¥ng tin user t·ª´ database
    const user = await User.findByPk(req.user.user_id);
    if (!user) {
      return res.status(404).json({ 
        success: false, 
        error: 'User not found' 
      });
    }

    // Ki·ªÉm tra user c√≥ g√≥i AI kh√¥ng
    if (!user.ai_package_id) {
      return res.status(403).json({ 
        success: false, 
        error: 'AI package required. Please purchase an AI package to use this feature.' 
      });
    }

    // Ki·ªÉm tra g√≥i AI c√≥ t·ªìn t·∫°i v√† active kh√¥ng
    const aiPackage = await AIPackage.findByPk(user.ai_package_id);
    if (!aiPackage || !aiPackage.status) {
      return res.status(403).json({ 
        success: false, 
        error: 'Your AI package is not available. Please contact support.' 
      });
    }

    // Ki·ªÉm tra g√≥i AI c√≥ h·∫øt h·∫°n kh√¥ng
    if (user.ai_package_expires_at && new Date() > user.ai_package_expires_at) {
      return res.status(403).json({ 
        success: false, 
        error: 'Your AI package has expired. Please renew your subscription.' 
      });
    }

    // Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng c√≥ v∆∞·ª£t qu√° gi·ªõi h·∫°n kh√¥ng
    if (aiPackage.max_usage && user.ai_usage_count >= aiPackage.max_usage) {
      return res.status(403).json({ 
        success: false, 
        error: `You have reached the maximum usage limit (${aiPackage.max_usage} times). Please upgrade your package.` 
      });
    }

    // L∆∞u th√¥ng tin g√≥i AI v√†o request ƒë·ªÉ s·ª≠ d·ª•ng sau
    req.userAIPackage = aiPackage;
    req.userAIUsage = user.ai_usage_count;
    
    console.log('‚úÖ User c√≥ g√≥i AI h·ª£p l·ªá:', aiPackage.name);
    next();
    
  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra g√≥i AI:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Error checking AI package. Please try again.' 
    });
  }
  */
}

module.exports = { authenticateToken, authorizeRole, checkAIPackage };